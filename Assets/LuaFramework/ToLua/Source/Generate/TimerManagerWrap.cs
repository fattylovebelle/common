//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TimerManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TimerManager), typeof(Manager));
		L.RegFunction("AddTimer", AddTimer);
		L.RegFunction("RemoveTimer", RemoveTimer);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.RegFunction("OnTimer", TimerManager_OnTimer);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTimer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				TimerManager obj = (TimerManager)ToLua.CheckObject<TimerManager>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				TimerManager.OnTimer arg1 = (TimerManager.OnTimer)ToLua.CheckDelegate<TimerManager.OnTimer>(L, 3);
				obj.AddTimer(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				TimerManager obj = (TimerManager)ToLua.CheckObject<TimerManager>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				TimerManager.OnTimer arg1 = (TimerManager.OnTimer)ToLua.CheckDelegate<TimerManager.OnTimer>(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.AddTimer(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: TimerManager.AddTimer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveTimer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TimerManager obj = (TimerManager)ToLua.CheckObject<TimerManager>(L, 1);
			TimerManager.OnTimer arg0 = (TimerManager.OnTimer)ToLua.CheckDelegate<TimerManager.OnTimer>(L, 2);
			obj.RemoveTimer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, TimerManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TimerManager_OnTimer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<TimerManager.OnTimer>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<TimerManager.OnTimer>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

