//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CommonEventsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CommonEvents), typeof(System.Object));
		L.RegFunction("New", _CreateCommonEvents);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CONNECT_SUCCESS", get_CONNECT_SUCCESS, null);
		L.RegVar("CONNECT_FAILT", get_CONNECT_FAILT, null);
		L.RegVar("CONNECT_CLOSE", get_CONNECT_CLOSE, null);
		L.RegVar("NET_EXCEPTION", get_NET_EXCEPTION, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateCommonEvents(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				CommonEvents obj = new CommonEvents();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: CommonEvents.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CONNECT_SUCCESS(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, CommonEvents.CONNECT_SUCCESS);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CONNECT_FAILT(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, CommonEvents.CONNECT_FAILT);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CONNECT_CLOSE(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, CommonEvents.CONNECT_CLOSE);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NET_EXCEPTION(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, CommonEvents.NET_EXCEPTION);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

