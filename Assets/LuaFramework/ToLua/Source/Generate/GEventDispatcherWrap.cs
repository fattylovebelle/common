//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GEventDispatcherWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GEventDispatcher), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("AddEventListner", AddEventListner);
		L.RegFunction("RemoveEventListner", RemoveEventListner);
		L.RegFunction("DispatchEvent", DispatchEvent);
		L.RegFunction("DelayDispatchEvent", DelayDispatchEvent);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.RegFunction("Listner", GEventDispatcher_Listner);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEventListner(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject(L, 1, typeof(GEventDispatcher));
			string arg0 = ToLua.CheckString(L, 2);
			GEventDispatcher.Listner arg1 = (GEventDispatcher.Listner)ToLua.CheckDelegate<GEventDispatcher.Listner>(L, 3);
			obj.AddEventListner(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEventListner(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject(L, 1, typeof(GEventDispatcher));
			string arg0 = ToLua.CheckString(L, 2);
			GEventDispatcher.Listner arg1 = (GEventDispatcher.Listner)ToLua.CheckDelegate<GEventDispatcher.Listner>(L, 3);
			obj.RemoveEventListner(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DispatchEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject(L, 1, typeof(GEventDispatcher));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.DispatchEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DelayDispatchEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			GEventDispatcher obj = (GEventDispatcher)ToLua.CheckObject(L, 1, typeof(GEventDispatcher));
			string arg0 = ToLua.CheckString(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.DelayDispatchEvent(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, GEventDispatcher.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GEventDispatcher_Listner(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GEventDispatcher.Listner>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GEventDispatcher.Listner>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

